// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api/proto/courier.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Couriers_GetAllCouriers_FullMethodName = "/couriers.Couriers/GetAllCouriers"
	Couriers_CreateCourier_FullMethodName  = "/couriers.Couriers/CreateCourier"
)

// CouriersClient is the client API for Couriers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CouriersClient interface {
	GetAllCouriers(ctx context.Context, in *GetAllCouriersRequest, opts ...grpc.CallOption) (*GetAllCouriersResponse, error)
	CreateCourier(ctx context.Context, in *CreateCourierRequest, opts ...grpc.CallOption) (*CourierResponse, error)
}

type couriersClient struct {
	cc grpc.ClientConnInterface
}

func NewCouriersClient(cc grpc.ClientConnInterface) CouriersClient {
	return &couriersClient{cc}
}

func (c *couriersClient) GetAllCouriers(ctx context.Context, in *GetAllCouriersRequest, opts ...grpc.CallOption) (*GetAllCouriersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllCouriersResponse)
	err := c.cc.Invoke(ctx, Couriers_GetAllCouriers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couriersClient) CreateCourier(ctx context.Context, in *CreateCourierRequest, opts ...grpc.CallOption) (*CourierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CourierResponse)
	err := c.cc.Invoke(ctx, Couriers_CreateCourier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CouriersServer is the server API for Couriers service.
// All implementations must embed UnimplementedCouriersServer
// for forward compatibility.
type CouriersServer interface {
	GetAllCouriers(context.Context, *GetAllCouriersRequest) (*GetAllCouriersResponse, error)
	CreateCourier(context.Context, *CreateCourierRequest) (*CourierResponse, error)
	mustEmbedUnimplementedCouriersServer()
}

// UnimplementedCouriersServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCouriersServer struct{}

func (UnimplementedCouriersServer) GetAllCouriers(context.Context, *GetAllCouriersRequest) (*GetAllCouriersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCouriers not implemented")
}
func (UnimplementedCouriersServer) CreateCourier(context.Context, *CreateCourierRequest) (*CourierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCourier not implemented")
}
func (UnimplementedCouriersServer) mustEmbedUnimplementedCouriersServer() {}
func (UnimplementedCouriersServer) testEmbeddedByValue()                  {}

// UnsafeCouriersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CouriersServer will
// result in compilation errors.
type UnsafeCouriersServer interface {
	mustEmbedUnimplementedCouriersServer()
}

func RegisterCouriersServer(s grpc.ServiceRegistrar, srv CouriersServer) {
	// If the following call pancis, it indicates UnimplementedCouriersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Couriers_ServiceDesc, srv)
}

func _Couriers_GetAllCouriers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCouriersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouriersServer).GetAllCouriers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Couriers_GetAllCouriers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouriersServer).GetAllCouriers(ctx, req.(*GetAllCouriersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Couriers_CreateCourier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCourierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouriersServer).CreateCourier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Couriers_CreateCourier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouriersServer).CreateCourier(ctx, req.(*CreateCourierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Couriers_ServiceDesc is the grpc.ServiceDesc for Couriers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Couriers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "couriers.Couriers",
	HandlerType: (*CouriersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllCouriers",
			Handler:    _Couriers_GetAllCouriers_Handler,
		},
		{
			MethodName: "CreateCourier",
			Handler:    _Couriers_CreateCourier_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/courier.proto",
}
